exports.id=181,exports.ids=[181],exports.modules={13029:(a,b,c)=>{"use strict";c.d(b,{Gq:()=>m,R1:()=>k,U1:()=>n,UQ:()=>l});let d="https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound",e=/^\d{2,7}-\d{2}-\d$/;function f(a){let b=a.slice(0,400).toUpperCase();return!b.includes(" 2D")&&(!!(b.includes(" 3D")||b.includes(" V3000"))||a.split(/\n/).slice(4,30).some(a=>{let b=parseFloat(a.slice(20,30));return!Number.isNaN(b)&&Math.abs(b)>.001}))}async function g(a){let b="number"==typeof a||/^\d+$/.test(String(a))?`cid/${a}`:encodeURIComponent(String(a)),c=async a=>{let c=`https://cactus.nci.nih.gov/chemical/structure/${b}/file${a?"?format=sdf&get3d=true":"?format=sdf"}`;console.log(`[3D Fetch] CACTUS attempt: ${c}`);let d=await fetch(c,{headers:{"User-Agent":"moleculens/1.0"}});if(console.log(`[3D Fetch] CACTUS response: ${d.status} ${d.headers.get("content-type")}`),404===d.status||!d.ok&&500!==d.status)return null;let e=await d.text();return f(e)?e:null},d=await c(!0);return d||(d=await c(!1)),d}async function h(a){let b=await fetch(`${d}/cid/${a}/synonyms/JSON`,{headers:{"User-Agent":"moleculens/1.0"}});if(console.log(`[3D Fetch] CAS lookup response: ${b.status}`),!b.ok)return null;let c=(await b.json())?.InformationList?.Information?.[0]?.Synonym;return c?.find(a=>e.test(a))??null}async function i(a){let b=await fetch(`https://webbook.nist.gov/cgi/cbook.cgi?Str3File=C${a.replace(/-/g,"")}`,{headers:{"User-Agent":"moleculens/1.0"}});if(console.log(`[3D Fetch] NIST response: ${b.status} ${b.headers.get("content-type")}`),!b.ok)return null;let c=await b.text();return f(c)?c:null}async function j(a){try{let b=await fetch(`${d}/cid/${a}/property/CanonicalSMILES,IsomericSMILES,InChI/JSON`);if(!b.ok)return null;let c=(await b.json())?.PropertyTable?.Properties?.[0]??{};return c.CanonicalSMILES||c.IsomericSMILES||c.InChI||null}catch{return null}}async function k(a){try{let b=await fetch(`${d}/name/${encodeURIComponent(a)}/cids/JSON`);if(!b.ok)throw Error(`PubChem search failed: ${b.statusText}`);let c=await b.json(),e=c.IdentifierList?.CID?.[0];if(!e)return null;return await l(e)}catch(a){return console.error("Error searching molecule by name:",a),null}}async function l(a){try{console.log(`[3D Fetch] Starting enhanced 3D fetch for CID ${a}`);let[b,c]=await Promise.all([fetch(`${d}/cid/${a}/property/MolecularFormula,MolecularWeight,CanonicalSMILES,InChI/JSON`),fetch(`${d}/cid/${a}/synonyms/JSON`)]),e=await b.json(),k=e.PropertyTable?.Properties?.[0];if(!k)throw Error("No molecular properties found");let l=[];try{let a=await c.json();l=a.InformationList?.Information?.[0]?.Synonym||[]}catch{}let n=l[0]||`CID ${a}`,o="";console.log(`[3D Fetch] Step 1: Trying PubChem 3D endpoint for ${n}`);try{let b=await fetch(`${d}/cid/${a}/SDF?record_type=3d`);if(b.ok){let a=await b.text();f(a)?(console.log(`[3D Fetch] ✓ Got 3D data from PubChem 3D endpoint`),o=a):console.warn(`[3D Fetch] PubChem returned planar coordinates for ${n}; trying other sources`)}}catch(a){console.warn("[3D Fetch] PubChem 3D endpoint failed:",a)}if(!o){console.log(`[3D Fetch] Step 2: Trying NIST via CAS for ${n}`);let b=await h(a);if(b){let a=await i(b);a&&f(a)&&(console.log(`[3D Fetch] ✓ Got 3D data from NIST (CAS ${b})`),o=a)}}if(!o){console.log(`[3D Fetch] Step 3: Trying CACTUS via CID for ${n}`);let b=await g(a);b&&(console.log(`[3D Fetch] ✓ Got 3D data from CACTUS via CID`),o=b)}if(!o){console.log(`[3D Fetch] Step 4: Trying CACTUS via SMILES for ${n}`);let b=await j(a);if(b){let a=await g(b);a&&(console.log(`[3D Fetch] ✓ Got 3D data from CACTUS via SMILES`),o=a)}}if(!o){console.log(`[3D Fetch] Step 5: Trying CACTUS via name for ${n}`);let a=await g(n.normalize("NFKD").replace(/[\u00AD\u2010-\u2015\u202F]/g,"-").replace(/[^\u0020-\u007F]/g,"").replace(/\s+/g," ").trim());a&&(console.log(`[3D Fetch] ✓ Got 3D data from CACTUS via name`),o=a)}if(!o){console.log(`[3D Fetch] Step 6: Trying PubChem computed conformers for ${n}`);try{let b=`${d}/cid/${a}/record/SDF?record_type=3d&response_type=save`,c=await fetch(b,{headers:{"User-Agent":"moleculens/1.0"}});if(console.log(`[3D Fetch] Conformer response: ${c.status} ${c.headers.get("content-type")}`),c.ok){let a=await c.text();console.log(`[3D Fetch] ✓ Got computed 3D from conformer endpoint`),o=a}}catch(a){console.warn("[3D Fetch] Conformer endpoint failed:",a)}}if(!o){console.log(`[3D Fetch] Step 7: Falling back to PubChem 2D for ${n}`);try{let b=await fetch(`${d}/cid/${a}/SDF?record_type=2d`);if(b.ok)o=await b.text(),f(o)||console.warn(`[3D Fetch] ⚠️ No 3D structure found for ${n}. Using 2D representation.`);else{let b=await fetch(`${d}/cid/${a}/SDF`);b.ok&&(o=await b.text(),console.warn(`[3D Fetch] ⚠️ Using default SDF endpoint as final fallback`))}}catch(a){console.error("[3D Fetch] All SDF fetch attempts failed:",a)}}if(!o)throw Error(`Unable to obtain SDF data for "${n}" (CID ${a})`);let p=f(o);console.log(`[3D Fetch] Final result for ${n}: ${p?"3D":"2D"} structure`),p&&console.log(`[3D Fetch] ✓ Successfully obtained 3D coordinates`);let q=await m(o);return{name:n,cid:a,smiles:k.CanonicalSMILES,inchi:k.InChI,formula:k.MolecularFormula,molecular_weight:k.MolecularWeight,synonyms:l.slice(0,10),sdf_data:o,pdb_data:q}}catch(a){throw console.error("Error fetching molecule data by CID:",a),a}}async function m(a){try{console.log("[SDF→PDB] Starting enhanced SDF to PDB conversion with bond parsing");let b=a.split(/\r?\n/),c=0,d=0,e=-1;for(let a=0;a<Math.min(5,b.length);a++){let f=b[a].trim();if(f.match(/^\s*\d+\s+\d+/)){let b=f.split(/\s+/);c=parseInt(b[0]),d=parseInt(b[1]),e=a,console.log(`[SDF→PDB] Found counts: ${c} atoms, ${d} bonds`);break}}if(0===c)throw Error("No atoms found in SDF data");let f="HEADER    MOLECULE CONVERTED FROM SDF\n";f+="COMPND    UNNAMED\nAUTHOR    MOLECULENS CLIENT-SIDE CONVERTER WITH BOND PARSING\n";let g=e+1,h=[];console.log(`[SDF→PDB] Parsing ${c} atoms starting from line ${g}`);for(let a=0;a<c&&g+a<b.length;a++){let c=b[g+a].trim().split(/\s+/);if(c.length>=4){let b=parseFloat(c[0]),d=parseFloat(c[1]),e=parseFloat(c[2]),g=c[3]||"C",i=a+1;h.push({x:b,y:d,z:e,element:g,atomNum:i});let j=i.toString().padStart(5," "),k=g.padEnd(4," "),l="MOL".padEnd(3," "),m="1".padStart(4," "),n=b.toFixed(3).padStart(8," "),o=d.toFixed(3).padStart(8," "),p=e.toFixed(3).padStart(8," "),q=g.padStart(2," ");f+=`ATOM  ${j} ${k} ${l} A${m}    ${n}${o}${p}  1.00  0.00          ${q}
`}}let i=g+c,j=new Map;console.log(`[SDF→PDB] Parsing ${d} bonds starting from line ${i}`);for(let a=1;a<=c;a++)j.set(a,new Set);let k=0;for(let a=0;a<d&&i+a<b.length;a++){let d=b[i+a].trim();if(!d||d.startsWith("M ")||d.startsWith(">"))continue;let e=d.split(/\s+/);if(e.length>=3){let a=parseInt(e[0]),b=parseInt(e[1]);a>=1&&a<=c&&b>=1&&b<=c&&a!==b?(j.get(a)?.add(b),j.get(b)?.add(a),k++):console.warn(`[SDF→PDB] Invalid bond: ${a}-${b} (atom count: ${c})`)}}console.log(`[SDF→PDB] Successfully processed ${k} bonds`);let l=0;for(let[a,b]of j)if(b.size>0){let c=Array.from(b).sort((a,b)=>a-b);for(let b=0;b<c.length;b+=4){let d=c.slice(b,b+4),e=a.toString().padStart(5," "),g=`CONECT${e}`;for(let a of d)g+=a.toString().padStart(5," ");f+=g+"\n",l++}}return console.log(`[SDF→PDB] Generated ${l} CONECT records`),f+="END\n",console.log(`[SDF→PDB] Conversion complete: ${c} atoms, ${k} bonds, ${l} CONECT records`),f}catch(a){throw console.error("Error converting SDF to PDB:",a),a}}function n(a){let b={synonyms:a.synonyms||[],keywords:[]};return a.smiles&&(b.canonical_smiles=a.smiles),a.inchi&&(b.inchi=a.inchi),a.formula&&(b.formula=a.formula),a.molecular_weight&&(b.formula_weight=a.molecular_weight),b}},13352:()=>{},49800:()=>{}};